h5write(well, h5file, "/well")
h5write(units, h5file, "/units")
print(h5ls(h5file))
h5write(array, h5file, "/array")
h5write(channels, h5file, "/channels")
h5write(treatment, h5file, "/treatment")
h5write(dose, h5file, "/dose")
h5write(size, h5file, "/size")
h5write(well, h5file, "/well")
h5write(units, h5file, "/units")
print(h5ls(h5file))
map.to.h5.dh <-
function (spikes, chem.info, h5file)
{
sjemea::map.to.h5(spikes, h5file)
h5file <- path.expand(h5file)
#if (file.exists(h5file)) unlink(h5file)
channels<- names(spikes)
well<-chem.info$well
treatment<-chem.info$treatment
size<-chem.info$size
dose<-chem.info$dose
units<-chem.info$units
wells <- axion.guess.well.number(channels)
array <- sprintf("Axion %d well", wells)
h5write(array, h5file, "/array")
h5write(channels, h5file, "/channels")
h5write(treatment, h5file, "/treatment")
h5write(dose, h5file, "/dose")
h5write(size, h5file, "/size")
h5write(well, h5file, "/well")
h5write(units, h5file, "/units")
print(h5ls(h5file))
}
library(meadq)
h5ls(choose.files())
create_ont_csv()\
create_ont_csv()
cur.file=1
h5Files
a
a=choose.files()
a
a
h5Files=a
save.rdata=F
write.header=T
plates = unique( sapply(strsplit(basename(h5Files), split="_"), function(x) x[3]) )
num.plates = length( plates )
cur.plate=1
s=list()
h5Files.wanted = h5Files[grep(x=h5Files,pattern= plates[cur.plate])]
#order according to DIV
temp.l<-sapply(sapply(strsplit(basename(h5Files.wanted),split="_"),
function(x) x[4]) , nchar)
temp.div= substring(
sapply( strsplit(basename(h5Files.wanted),split="_"), function(x) x[4]),
rep(4,length(h5Files.wanted)),temp.l)
h5Files.wanted = h5Files.wanted[order(as.numeric(temp.div)) ]
h5Files.wanted
cur.file=1
s[[cur.file]]=h5.read.spikes( h5Files.wanted[cur.file] )
g=c(); #remove any information stored in g
g<-h5read(path.expand( h5Files.wanted[cur.file] ), name = "/")
is.element( "treatment", names(g) )
s[[cur.file]]$cw = substring(s[[cur.file]]$channel,1,2 )
s[[cur.file]]$treatment = g$treatment
names(s[[cur.file]]$treatment) = g$well
s[[cur.file]]$dose = g$dose
names(s[[cur.file]]$dose) = g$well
s[[cur.file]]$sCount = g$sCount
names(s[[cur.file]]$sCount) = g$well
s[[cur.file]]$units = g$units
names(s[[cur.file]]$units) = g$well
s[[cur.file]]$well = g$well
s[[cur.file]]$summary.table = g$summary.table
s[[cur.file]]$array = g$array
s[[cur.file]]$DIV = strsplit( basename(s[[cur.file]]$file), split="_")[[1]][4]
s[[cur.file]]$DIV
allb=list()
allb <- lapply(s[[cur.file]]$spikes, mi.find.bursts)
s[[cur.file]]$allb <- allb
s[[cur.file]]$bs<-calc.burst.summary( s[[cur.file]]  )
h=calc.all.isi(s[[cur.file]], allb)
s[[cur.file]]$isi = h
nspikes.old <- calculate.network.spikes(s[[cur.file]])
s[[cur.file]]$ns.all <- nspikes.old$ns.all
nspikes <- summary.network.spikes.dh(s[[cur.file]],nspikes.old, ns.E = 2, sur)
s[[cur.file]]$ns.all <- nspikes$ns.all
# local correlation for one electrode with all other electrodes
local.cor=c()
local.cor<-local.corr.all.ont(s, t.p=cur.file )
s[[cur.file]]$local.cor<-local.cor
# cv.time and network
temp.list=c()
temp.list<- cv.timestamps(s[[cur.file]]$spikes, s, cur.file)
s[[cur.file]]$cv.time = temp.list[[1]]
names(s[[cur.file]]$cv.time) = unique(s[[cur.file]]$cw)
s[[cur.file]]$cv.network = temp.list[[2]]
names(s[[cur.file]]$cv.network) = unique(s[[cur.file]]$cw)
s[[cur.file]]$file
strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4]
strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])
strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4]
grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
"[DIV]" )
grepl( "D",
"[DIV]" )
if( grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],"[DIV]" ) ){
DIV = rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  ), num.wells),
} else{
DIV=rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
}
rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  ), num.wells)
substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4]
substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  )
num.wells
num.wells = length(unique( subset(s[[cur.file]]$cw, ae.index.v) ) )
ae.index.l<- split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw )
ae.index.v<- unlist( split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw ) )
# we need the wells that we have at least one AE
well.names<-unique( subset(s[[cur.file]]$cw, ae.index.v) )
num.wells = length(unique( subset(s[[cur.file]]$cw, ae.index.v) ) )
well.indices = which(is.element(s[[cur.file]]$well, well.names ))
rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
rep(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
if( grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],"[DIV]" ) ){
DIV = rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  ), num.wells),
} else{
DIV=rep(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
}
( grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],"[DIV]" ) )
if( grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],"[DIV]" ) ){
DIV = rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  ), num.wells),
} else {
DIV=rep(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
}
if( grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],"[DIV]" ) ){
DIV = rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  ), num.wells)
} else {
DIV=rep(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
}
source('E:/R/Rpackage_meadq/meadq/R/create_burst_ont_Data.R', echo=TRUE)
a
create_ont_csv(h5Files=a)
source('E:/R/Rpackage_meadq/meadq/R/create_burst_ont_Data.R', echo=TRUE)
h5Files
h5Files<-h5Files[1]
create_burst_ont_Data
create_ont_csv(h5Files=h5Files)
write.header=T
plates = unique( sapply(strsplit(basename(h5Files), split="_"), function(x) x[3]) )
num.plates = length( plates )
#####  Read in and make data
s=list()
h5Files.wanted = h5Files[grep(x=h5Files,pattern= plates[cur.plate])]
#order according to DIV
temp.l<-sapply(sapply(strsplit(basename(h5Files.wanted),split="_"),
function(x) x[4]) , nchar)
temp.div= substring(
sapply( strsplit(basename(h5Files.wanted),split="_"), function(x) x[4]),
rep(4,length(h5Files.wanted)),temp.l)
h5Files.wanted = h5Files.wanted[order(as.numeric(temp.div)) ]
curFile=1
s[[cur.file]]=h5.read.spikes( h5Files.wanted[cur.file] )
# get meta-data
g=c(); #remove any information stored in g
g<-h5read(path.expand( h5Files.wanted[cur.file] ), name = "/")
if ( is.element( "treatment", names(g) ) ){
s[[cur.file]]$cw = substring(s[[cur.file]]$channel,1,2 )
s[[cur.file]]$treatment = g$treatment
names(s[[cur.file]]$treatment) = g$well
s[[cur.file]]$dose = g$dose
names(s[[cur.file]]$dose) = g$well
s[[cur.file]]$sCount = g$sCount
names(s[[cur.file]]$sCount) = g$well
s[[cur.file]]$units = g$units
names(s[[cur.file]]$units) = g$well
s[[cur.file]]$well = g$well
s[[cur.file]]$summary.table = g$summary.table
s[[cur.file]]$array = g$array
s[[cur.file]]$DIV = strsplit( basename(s[[cur.file]]$file), split="_")[[1]][4]
} else{
print ('Error: meta-data not available in .h5 file');
}
allb=list()
allb <- lapply(s[[cur.file]]$spikes, mi.find.bursts)
s[[cur.file]]$allb <- allb
s[[cur.file]]$bs<-calc.burst.summary( s[[cur.file]]  )
h=calc.all.isi(s[[cur.file]], allb)
s[[cur.file]]$isi = h
nspikes.old <- calculate.network.spikes(s[[cur.file]])
s[[cur.file]]$ns.all <- nspikes.old$ns.all
nspikes <- summary.network.spikes.dh(s[[cur.file]],nspikes.old, ns.E = 2, sur)
s[[cur.file]]$ns.all <- nspikes$ns.all
# local correlation for one electrode with all other electrodes
local.cor=c()
local.cor<-local.corr.all.ont(s, t.p=cur.file )
s[[cur.file]]$local.cor<-local.cor
# cv.time and network
temp.list=c()
temp.list<- cv.timestamps(s[[cur.file]]$spikes, s, cur.file)
s[[cur.file]]$cv.time = temp.list[[1]]
names(s[[cur.file]]$cv.time) = unique(s[[cur.file]]$cw)
s[[cur.file]]$cv.network = temp.list[[2]]
names(s[[cur.file]]$cv.network) = unique(s[[cur.file]]$cw)
####  AE Filtered data frame
##+++++++++++++++++  make data frame
ae.index.l<- split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw )
ae.index.v<- unlist( split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw ) )
# we need the wells that we have at least one AE
well.names<-unique( subset(s[[cur.file]]$cw, ae.index.v) )
num.wells = length(unique( subset(s[[cur.file]]$cw, ae.index.v) ) )
well.indices = which(is.element(s[[cur.file]]$well, well.names ))
if( grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],"[DIV]" ) ){
DIV = rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  ), num.wells)
} else {
DIV=rep(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
}
DIV
rm("DIV")
rm(DIV)
DIV
if( grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],"[DIV]" ) ){
DIV = rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  ), num.wells)
} else {
DIV=rep(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
}
DIV
( num.wells>0 )
df=c()
df<-data.frame(
date = rep( unlist(strsplit(basename(s[[cur.file]]$file), split="_"))[2]  , num.wells) ,
Plate.SN = rep( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][3], num.wells) ,
DIV = DIV ,
well = well.names ,
trt = s[[cur.file]]$treatment[ well.names ]  ,
dose = s[[cur.file]]$dose[ well.names ]  ,
units = s[[cur.file]]$units[ well.names ]  ,
meanfiringrate=sapply(by(subset(s[[cur.file]]$meanfiringrate, ae.index.v),
subset(s[[cur.file]]$cw, ae.index.v), mean, na.rm=T), function(x) x[1]) ,
burst.per.min = sapply( by( subset(s[[cur.file]]$bs$bursts.per.min, ae.index.v),
subset(s[[cur.file]]$cw, ae.index.v), mean, na.rm=T), function(x) x[1]) ,
mean.isis = sapply(by(subset( s[[cur.file]]$bs$mean.isi, ae.index.v),
subset(s[[cur.file]]$cw, ae.index.v) , mean, na.rm=T), function(x) x[1]) ,
per.spikes.in.burst =sapply(by(subset(s[[cur.file]]$bs$per.spikes.in.burst, ae.index.v),
subset(s[[cur.file]]$cw, ae.index.v) , mean, na.rm=T), function(x) x[1]) ,
mean.dur =sapply(by(subset( s[[cur.file]]$bs$mean.dur, ae.index.v),
subset( s[[cur.file]]$cw, ae.index.v) , mean, na.rm=T), function(x) x[1]) ,
mean.IBIs =sapply(by(subset( s[[cur.file]]$bs$mean.IBIs, ae.index.v) ,
subset( s[[cur.file]]$cw, ae.index.v), mean, na.rm=T), function(x) x[1]) ,
nAE = unlist( lapply(
by( s[[cur.file]]$meanfiringrate*60, s[[cur.file]]$cw, function(x) x>=5), sum ) )[well.names] ,
nABE= unlist( lapply(
by( s[[cur.file]]$bs$bursts.per.min, s[[cur.file]]$cw, function(x) x>=0.5), sum ) )[well.names] ,
ns.n = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['n'])[paste(well.names, "n", sep=".")] , #nspikes$ns.all$A8$brief
ns.peak.m = sapply(s[[cur.file]]$ns.all ,
function(x) x$brief['peak.m'])[ paste(well.names, "peak.m", sep=".") ] ,
ns.durn.m = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['durn.m'])[ paste(well.names, "durn.m", sep=".") ] ,
ns.percent.of.spikes.in.ns = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['percent.of.spikes.in.ns'])[ paste(well.names, "percent.of.spikes.in.ns", sep=".") ] ,
ns.mean.insis = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['mean.insis'])[ paste(well.names, "mean.insis", sep=".") ] ,
ns.durn.sd = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['durn.sd'])[ paste(well.names, "durn.sd", sep=".") ] ,
ns.mean.spikes.in.ns = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['mean.spikes.in.ns'])[ paste(well.names, "mean.spikes.in.ns", sep=".") ] ,
# not computed on active electrodes,problem?
r=sapply(s[[cur.file]]$local.cor, mean, na.rm=T)[well.names] ,
cv.time = s[[cur.file]]$cv.time[well.names]  ,
cv.network = s[[cur.file]]$cv.network[well.names] ,
file.name = rep( basename(s[[cur.file]]$file), num.wells )
) #end data frame
df
(write.header )
write.table(  df, file = paste( paste( csv.filename.AEfilt,
strsplit(basename(s[[cur.file]]$file),split="_")[[1]][2] ,
plates[cur.plate],sep="_"), ".csv", sep="" ),
sep=",", append = F, col.names=T, row.names=F )
sum(abe.index)>0
ae.index.l<- split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw )
ae.index.v<- unlist( split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw ) )
abe.index<- unlist( split((s[[cur.file]]$bs$bursts.per.min>=0.5), f=s[[cur.file]]$cw ) )
sum(abe.index)>0
well.names<-unique( subset(s[[cur.file]]$cw, abe.index) )
num.wells = length(unique( subset(s[[cur.file]]$cw, abe.index) ) )
well.indices = which(is.element(s[[cur.file]]$well, well.names ))
if( grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],"[DIV]" ) ){
DIV = rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  ),
num.wells)
} else {
DIV=rep(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
}
DIV
df2=c()
df2<-data.frame(
date = rep( unlist(strsplit(basename(s[[cur.file]]$file), split="_"))[2]  , num.wells) ,
Plate.SN = rep( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][3], num.wells) ,
DIV = DIV ,
well = well.names ,
trt = s[[cur.file]]$treatment[well.names]  ,
dose = s[[cur.file]]$dose[ well.names ]  ,
units = s[[cur.file]]$units[ well.names ]  ,
meanfiringrate = sapply(by(subset(s[[cur.file]]$meanfiringrate, abe.index),
subset(s[[cur.file]]$cw, abe.index), mean, na.rm=T), function(x) x[1]) ,
burst.per.min = sapply( by( subset(s[[cur.file]]$bs$bursts.per.min, abe.index),
subset(s[[cur.file]]$cw, abe.index), mean, na.rm=T), function(x) x[1]) ,
mean.isis = sapply(by(subset( s[[cur.file]]$bs$mean.isi, abe.index),
subset(s[[cur.file]]$cw, abe.index) , mean, na.rm=T), function(x) x[1]) ,
per.spikes.in.burst =sapply(by(subset(s[[cur.file]]$bs$per.spikes.in.burst, abe.index),
subset(s[[cur.file]]$cw, abe.index) , mean, na.rm=T), function(x) x[1]) ,
mean.dur =sapply(by(subset( s[[cur.file]]$bs$mean.dur, abe.index),
subset( s[[cur.file]]$cw, abe.index) , mean, na.rm=T), function(x) x[1]) ,
mean.IBIs =sapply(by(subset( s[[cur.file]]$bs$mean.IBIs, abe.index) ,
subset( s[[cur.file]]$cw, abe.index), mean, na.rm=T), function(x) x[1]) ,
nAE = unlist( lapply(
by( s[[cur.file]]$meanfiringrate*60, s[[cur.file]]$cw, function(x) x>=5), sum ) )[well.names] ,
nABE = unlist( lapply(
by( s[[cur.file]]$bs$bursts.per.min, s[[cur.file]]$cw, function(x) x>=0.5), sum ) )[well.names] ,
ns.n = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['n'])[paste(well.names, "n", sep=".")] , #nspikes$ns.all$A8$brief
ns.peak.m = sapply(s[[cur.file]]$ns.all ,
function(x) x$brief['peak.m'])[ paste(well.names, "peak.m", sep=".") ] ,
ns.durn.m = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['durn.m'])[ paste(well.names, "durn.m", sep=".") ] ,
ns.percent.of.spikes.in.ns = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['percent.of.spikes.in.ns'])[ paste(well.names, "percent.of.spikes.in.ns", sep=".") ] ,
ns.mean.insis = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['mean.insi'])[ paste(well.names, "mean.insi", sep=".") ] ,
ns.durn.sd = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['durn.sd'])[ paste(well.names, "durn.sd", sep=".") ] ,
ns.mean.spikes.in.ns = sapply(s[[cur.file]]$ns.all,
function(x) x$brief['mean.spikes.in.ns'])[ paste(well.names, "mean.spikes.in.ns", sep=".") ] ,
# not computed on active electrodes,problem?
r=sapply(s[[cur.file]]$local.cor, mean, na.rm=T)[well.names] ,
cv.time=s[[cur.file]]$cv.time[well.names]  ,
cv.network=s[[cur.file]]$cv.network[well.names] ,
file.name = rep( basename(s[[cur.file]]$file), num.wells )
)
if ( write.header ){
write.table(  df2, file= paste( paste( csv.filename.ABEfilt, strsplit(basename(s[[cur.file]]$file),split="_")[[1]][2] ,
plates[cur.plate],sep="_"), ".csv", sep="" ) ,
sep=",", append = F, col.names=T, row.names=F )
} else{
write.table(  df2, file= paste( paste( csv.filename.ABEfilt, strsplit(basename(s[[cur.file]]$file),split="_")[[1]][2] ,
plates[cur.plate],sep="_"), ".csv", sep="" ),
sep=",", append = T, col.names=F, row.names=F )
}
source('E:/R/Rpackage_meadq/meadq/R/create_burst_ont_Data.R', echo=TRUE)
create_burst_ont_Data
create_ont_csv()
strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4]
unlist(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])
rep(unlist( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4] ),
num.wells)
grepl( strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],"[DIV]" )
ae.index.l<- split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw )
ae.index.v<- unlist( split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw ) )
# we need the wells that we have at least one AE
well.names<-unique( subset(s[[cur.file]]$cw, ae.index.v) )
num.wells = length(unique( subset(s[[cur.file]]$cw, ae.index.v) ) )
well.indices = which(is.element(s[[cur.file]]$well, well.names ))
rep( substring(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
4, nchar(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4])  ), num.wells)
rep(strsplit(basename(s[[cur.file]]$file), split="_")[[1]][4],
num.wells)
create_ont_csv()
DIV
r=asign(DIV)
r=assign(DIV)
assign(r,DIV)
assign(DIV,r)
assign(r,'DIV')
is.numeric(DIV)
source('E:/R/Rpackage_meadq/meadq/R/create_burst_ont_Data.R', echo=TRUE)
create_burst_ont_Data
create_ont_csv()
?write.table
df
as.numeric( DIV )
create_burst_ont_Data(h5Files,  save.rdata=F )
create_ont_csv(h5Files=h5Files)
combine.h5.files
combine.h5.files.dh
data.dir<-"L:/Lab/NHEERL_MEA/PIP3 - Project/Data/Specific Aim 1/prepared_data/"
paste(data.dir,"AllAEOntogeny_files.csv",sep="")
data<-paste(data.dir,"AllAEOntogeny_files.csv",sep="")
temp.df<-read.table(data,sep=",",header=T)
names(temp.df)
df<-temp.df[temp.df$DIV!=12.1]
df<-temp.df[temp.df$DIV!=12.1, ]
unique(df$DIV)
paste( df$treatment, df$dose,sep="."  )
paste( df$trt, df$dose,sep="."  )
df.trt<-df[df$dose!=0]
df[df$dose!=0, ]
df.trt<-df[df$dose!=0, ]
chem.dose<-paste( df.trt$trt, df.trt$dose,sep="."  )
chem.dose
chem.dose<-paste( df.trt$trt, df.trt$dose,sep="_"  )
chem.dose<-paste( df$trt, df$dose,sep="_"  )
sapply(chem.dose, function(x){
index.c<-which(substring(x,length(x)-2,length(x))=="_0")} )
sapply(chem.dose, function(x){
which(substring(x,length(x)-2,length(x))=="_0") } )
index.c<-which(df$dose==0)
chem.dose[index.c]<-"cont"
chem.dose
df$chem.dose<-chem.dose
?aggregate
aggregate( meanfiringrate, by="chem.dose", FUN=mean)
names(df)
aggregate( df, by="chem.dose", FUN=mean)
aggregate( df, by=chem.dose, FUN=mean)
aggregate( df, by=list(chem.dose), FUN=mean)
aggregate( df, by=list(chem.dose), FUN=mean, na.rm=T)
sd(c(1,2,3))
sd(c(1,2,6))
df.sd<-aggregate( df, by=list(chem.dose), FUN=sd, na.rm=T)
warnings()
df.sd
names(df.sd)
names(df.sd)[c(1,9:26)]
names.want<-names(df.sd)[c(1,9:26)]
df.mean[ ,names.want]
df.mean<-aggregate( df, by=list(chem.dose), FUN=mean, na.rm=T)
df.mean[ ,names.want]
names(df.sd)<-paste(names(df.mean),"sd",sep=".")
names(df.sd)
df.combo<-cbind( df.mean[ ,c(1,9:26)], df.sd[ ,c(1,9:26)] )
names(df.combo)
sort(names(df.combo))
order.combo.names<-sort(names(df.combo))
df.combo<-df.combo[ ,order.combo.names]
df.combo
df.n<-aggregate( df, by=list(chem.dose), FUN=length)
df.n<-aggregate( df, by=list(chem.dose), FUN=length)
df.n
df.n<-aggregate( df, by=list(chem.dose), FUN=length)[ ,1:2]
df.n
df.n<-aggregate( df, by=list(chem.dose), FUN=length)
df.sd/df.n
summary(df.n)
df.sd/df.n[,2]
df.sd[,2/df.n[,2]
df.sd[,2]/df.n[,2]
sweep(df.sd, df.n[,2],2)
?sweep
ratio(1/2)
divide(1,2)
division(1,2)
?/
help("/")
df.sd/df.n
df.sd[,2:3]/df.n[,2:3]
df.sd[,2:length(df.sd[1,])]/df.n[,2]
df.se<-df.sd[,2:length(df.sd[1,])]/df.n[,2]
df.se
df.se<-cbind(df.sd[,1], df.sd[,2:length(df.sd[1,])]/df.n[,2] )
names(df.se)
df.mean<-aggregate( df, by=list(chem.dose), FUN=mean, na.rm=T)
df.sd<-aggregate( df, by=list(chem.dose), FUN=sd, na.rm=T)
df.n<-aggregate( df, by=list(chem.dose), FUN=length)
df.se<-cbind(df.sd[,1], df.sd[,2:length(df.sd[1,])]/df.n[,2] )
names(df.se)<-paste(names(df.mean),"se",sep=".")
df.se<-cbind(df.sd[,1], df.sd[,2:length(df.sd[1,])]/df.n[,2], n=df.n[,2] )
names(df.se)
df.se<-cbind(chem.dose=df.sd[,1],
df.sd[,2:length(df.sd[1,])]/df.n[,2],
n=df.n[,2] )
df.se
df.se<-cbind(chem.dose.group=df.sd[,1],
df.sd[,2:length(df.sd[1,])]/df.n[,2],
n=df.n[,2] )
df.se<-cbind(chem.dose.group=df.sd[,1],
df.sd[,2:length(df.sd[1,])]/df.n[,2] )
names(df.se)<-paste(names(df.mean),"se",sep=".")
names(df.se)
names(df.se)<-paste(names(df.mean),"se",sep=".")
df.combo<-cbind( df.mean[ ,c(1,9:26)], df.se[ ,c(9:26)] )
names(df.combo)
df.combo<-cbind( df.mean[ ,c(1,9:26)], df.se[ ,c(1,9:26)] )
order.combo.names<-sort(names(df.combo))
df.combo<-df.combo[ ,order.combo.names]
df.combo<-cbind(df.n[,2], df.combo)
df.combo
df.combo.temp<-cbind(n=df.n[,2], df.combo)
df.combo<-cbind( df.mean[ ,c(9:26)], df.se[ ,c(9:26)] )
order.combo.names<-sort(names(df.combo))
df.combo<-df.combo[ ,order.combo.names]
df.combo.temp<-cbind(chem.dose=df.mean[,1], n=df.n[,2], df.combo)
df.combo.temp
