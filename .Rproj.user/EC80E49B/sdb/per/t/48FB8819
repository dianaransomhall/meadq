{
    "contents" : "\n#purpose: to combine .h5 files such as file1_001.h5, file2_002.h5, file3_003.h5\n#input: h5Files to be combined\n#output: list of combined files\ncombine.h5.files.chgv<-function(h5Files ){\n  #load meta data\n  s=list()\n  h5Files<-sort(h5Files)\n  for (i in 1:length(h5Files)){\n    s[[i]]<-h5.read.spikes.chgv(h5Files[[i]])\n    summary(s[[i]])\n  }#end of reaching in spikes\n  \n  #filter spikes \n  s_combo<-list()\n  cc=0#combo count, indexes the list after files have been combined\n  for (i in 1:length(h5Files)){\n    #is current file=baseline file?\n    #need to add in how to deal with baseline file\n    #being split into many files \"001\",\"002\",.. etc\n    if (substr(basename(s[[i]]$file),\n               nchar(basename(s[[i]]$file))-5,\n               nchar(basename(s[[i]]$file))-3) ==\"001\" ){\n      #increment combo_count\n      cc=cc+1\n      #s_combo has first of files\n      s_combo[[cc]]<-s[[i]]\n      #temporary holder for spikes\n      comboSpikes=s[[i]]$spikes\n      #list of channels on initial file (.001)\n      initialChannels<-s[[i]]$channels\n    } else if (substr(basename(s[[i]]$file),1,\n                      nchar(basename(s[[i]]$file))-5)==\n                 substr(basename(s_combo[[cc]]$file),\n                        1,\n                        nchar(basename(s_combo[[cc]]$file))-5) ){\n      \n      #combine lists together\n      comboSpikes<-mapply(c,comboSpikes,\n                          s[[i]]$spikes[initialChannels])\n      \n      #update s_combo\n      s_combo[[cc]]$spikes<-comboSpikes\n      s_combo[[cc]]$nspikes<-sapply(comboSpikes, length)\n      s_combo[[cc]]$rec.time<-c(s_combo[[cc]]$rec.time[1], s[[i]]$rec.time[2])\n      s_combo[[cc]]$meanfiringrate <- s_combo[[cc]]$nspikes/\n        (s_combo[[cc]]$rec.time[2]-s_combo[[cc]]$rec.time[1])    \n      \n      \n    } else {\n      print=\"issue with coding\"\n    }\n    \n  }#end of loop through files\n  \n  ###make an .h5 file that combines 001, 002, 003 etc appropriately\n  #append with _000\n  for (i in 1:cc){\n    #create file\n    h5File_combo<-paste(substr(s_combo[[i]]$file,1,\n                               nchar(s[[i]]$file)-7),\n                        \"_000.h5\",sep='')\n    if (file.exists(h5File_combo)) \n      unlink(h5File_combo)\n    h5createFile(h5File_combo)\n    \n    #organize data for wells\n    wells <- axion.guess.well.number(s_combo[[i]]$channels)\n    array <- sprintf(\"Axion %d well\", wells)\n    plate.info <- plateinfo(array)\n    epos <- axion.elec.name.to.xy(s_combo[[i]]$channels, plate.info)\n    \n    \n    #write data to .h5 file\n    h5write(unlist(s_combo[[i]]$spikes), h5File_combo, \"/spikes\")\n    h5write(s_combo[[i]]$nspikes, h5File_combo, \"/sCount\")\n    h5write(epos, h5File_combo, \"/epos\")\n    h5write(s_combo[[i]]$channels, h5File_combo, \"/names\")\n    h5write(array, h5File_combo, \"/array\")\n    h5write(s_combo[[i]]$treatment, h5File_combo, \"/treatment\")\n    h5write(s_combo[[i]]$dose, h5File_combo, \"/dose\")\n    h5write(s_combo[[i]]$genotype, h5File_combo, \"/genotype\")\n    h5write(s_combo[[i]]$pup, h5File_combo, \"/pup\")\n    h5write(s_combo[[i]]$trt.div, h5File_combo, \"/trt.div\")\n    h5write(s_combo[[i]]$well, h5File_combo, \"/well\")\n    h5write(s_combo[[i]]$units, h5File_combo, \"/units\")\n    print(h5ls(h5File_combo))\n    \n    \n  }#end of for loop through s_combo\n  h5File_combo\n}# end of combine.h5.files.dh\n",
    "created" : 1410558863652.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3677978154",
    "id" : "48FB8819",
    "lastKnownWriteTime" : 1410559721,
    "path" : "F:/R/Rpackage_meadq/meadq/R/combine.h5.files.chgv.R",
    "project_path" : "R/combine.h5.files.chgv.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}