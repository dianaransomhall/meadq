{
    "contents" : "# ERGM.R\n# Diana Hall\n# 5/10/2013\n# purpose: to fit an simple ERGM model to MEA data\n\n# Spatial information available in MEAs\n\n# load libraries\nlibrary(sjemea)\nlibrary(lattice)\nlibrary(ggplot2)\nlibrary(meadq)\nlibrary(network)\nlibrary(latticeExtra)\n# citation(\"network\") # to tell you about package\nlibrary(sna)\nlibrary(ergm)\n\n#?ergs\n#ergm (formula,\n#   response=NULL,\n#   reference=~Bernoulli,\n\n# in order to analyse a bunch of wells of networks, constraints \n# need to be put in as block diagonal matrix with only 0 between\n# blocks.\n#   constraints=~.,   \n#   offset.coef=NULL,\n#   target.stats=NULL,\n#   eval.loglik=TRUE,\n#   estimate=c(\"MLE\", \"MPLE\"),\n#   control=control.ergm(),\n#   verbose=FALSE,\n#   ...)\n\n\n\n\n# load data\nload(choose.files(\"Choose .RData file \") )\n\n# Identify path for working directory\noutput.dir <- \"F:/Kathleen/Analysis/ERGM\"\n# directories\ngraph.dir<-paste(output.dir, \"/figs\",sep=\"\") \n\n\n\n\n\n#  Let's look at the spatial structure using tiling coefficient\n# tiling.allpairwise and tiling.corr, let's use dt = 0.05 based on \n# graph of dt vs\n# we can quantify how many subgraphs there are in the data\n\nDIVs<-unlist( lapply(s, function(x) strsplit(x$file,split=\"_\")[[1]][4] ) )\n\nfor (t.p in 2:4){\n\n  cur.well=\"F8\"; cur.div=DIVs[t.p]\n  a=s[[t.p]] ; ch.index = which(s[[t.p]]$cw==cur.well )\n  b=tiling.allpairwise(a, dt=0.05)\n  c = b[ch.index, ch.index]; \n  elect.names<-s[[t.p]]$channels[ch.index]\n  colnames(c)<-substring(elect.names, 4,5)\n  rownames(c)<-substring(elect.names, 4,5)\n  c[is.na(c)]<-0; d<-c+t(c); d[d==2]<-1\n  heatmap(d, symm=T, \n          main=paste(\"Tiling well \",cur.well, \" DIV \", cur.div, sep=\"\") )\n    \n}\n\ncor.mat<-d\ncor.mat[cor.mat==1]<-0\n\n# lets set the threshold to one that includes 1/2 the edges\nthresh = quantile(cor.mat)[4]\nt=cor.mat>thresh\nbin.cor.mat<-matrix(as.numeric(t), nrow=dim(cor.mat)[1], \n      byrow=T, dimnames=list(rownames(cor.mat),colnames(cor.mat)) )\n\n# Read in network edgelist\n# el <- read.csv(\"F:/Kathleen/Analysis/ERGM/Odum_ERGM/senEL.csv\",stringsAsFactors=F)\n# Read in euclidean distance (units in lat/long)\n# nodes in the data set need \n# euclidean distance between states\n# edist <- read.csv(\"F:/Kathleen/Analysis/ERGM/Odum_ERGM/edist.csv\", row.names=1)\n# edist <- as.matrix(edist)\n# Read in vertex data\n# nominate scores: for each person one score\n# dwnom <- read.csv(\"F:/Kathleen/Analysis/ERGM/Odum_ERGM/dwnom1.csv\",stringsAsFactors=F)\n# Create the network, \n# use 'directed'=FALSE for an undirected network\n# the network names must be characters, or they will be \n#  interpretted as weights\n# net <- network.initialize( nrow(dwnom))\n# network.vertex.names(net) <- dwnom$labs\n# net[as.matrix(el)] <- 1\n# set.vertex.attribute(net,\"ideol\",dwnom$dwnom)\n\n#initialize network\nnet2<-network.initialize( nrow(bin.cor.mat), directed=FALSE )\n\n#give the network names\n# network names and node level need to be in the same order\nnetwork.vertex.names(net2) <- rownames(bin.cor.mat)\n\n# Add in edges\ntemp=which(bin.cor.mat!=0, arr.ind=T)\nedge.list = cbind( colnames(bin.cor.mat)[temp[,2]], \n    rownames(bin.cor.mat)[temp[,1]] )\nnet2[as.matrix(edge.list)] <- 1\n\n\n# Define vertex attribute\n# set firing rate as attribute\nset.vertex.attribute(net2,\"mfr\", s[[t.p]]$meanfiringrate[elect.names] )\n\nn.ns.mem = rowSums(s[[t.p]]$ns.all[[cur.well]]$en.map!=0)\nset.vertex.attribute(net2,\"mem.ns\", n.ns.mem )\n\n\n# Define network attribute\n# set.network.attribute(net,\"dist\",edist)\n\n# set the distances between electrodes as node attribute\ndists = as.matrix(dist( s[[t.p]]$layout$pos[elect.names,] ) )\ncoords = s[[t.p]]$layout$pos[elect.names,]\nset.network.attribute(net2,\"dist\", dists )\n\n\n\n\n\n\n# graph\npar(mfrow=c(1,1), mar=c(3,3,2,2))\nplot(net2, displayisolates = TRUE, vertex.cex = 0.7, \n     coord= coords , jitter=T,\n     main=paste(\"r corr above \", thresh, \" well \", cur.well, sep=\"\") )\n\n# this will give you size of each partition.\n# top row is count, bottom row is size\ntable(component.dist(net2)$csize)\n\n# degree of each node, we chose \"indegree\" to avoid double counting connections\nsummary(net2~degree(c(1,2,3,4,5,6,7,8)) )\n\nsummary(net2 ~ triangle )\n\n# kstar(i): a center node N, and i other nodes where (N,O) has an edsge\n# for at least i other nodes O\nsummary(net2~ kstar(c(2,3,4,5) ) )\n\n# look at cycles\nsummary(net2~ cycle(c(2,3,4,5, 6,7,9,10)) )\n\n\nsummary(net2~edgecov(  ) )\n\nmixingmatrix(net2, \"Grade\")\n\n# ergm with simple ideological and geographic homophily\n# also an intercept (edges)\n# est1 <- ergm(net~edges+absdiff(\"ideol\")+edgecov(\"dist\"))\n\ntest1 <-ergm(net2 ~edges + absdiff(\"mfr\") + edgecov(\"dist\") + absdiff(\"mem.ns\") )\nsummary(test1)\n\n# Check goodness of fit\n# compute GOF\nset.seed(1234)\n# Sets up a 4-panel R plot\npar(mfrow=c(2,2), mar=c(1,1,1,1))\n# this estimates paramters by setting a theta, it then similates \n# networks using these thetas, and re-estimates the network, then\n# it computes a wald test to see if the current theta est are \n# better than the previous theta est. If NOT, it continues the \n# process, if so it stops, or it stops if it reaches\n# maxiter which is an input arguement\n\ngof1 <- gof(est1,control=control.gof.ergm(nsim=200))\ntgof1 <- gof(test1,control=control.gof.ergm(nsim=200))\n\n# plot observed values against boxplots of simulated\npar(mfrow=c(2,2),mar=c(1,1,1,1))\nplot(gof1)\nplot(tgof1)\n\n\n# we can see that some of the plots are very bad.  what should \n# be done is to add a variable one at a time\n\n# if we wanted to compare absdiff.ideol coef to edgecov.edist\n# then we would have to standardize their scales before putting\n# them in the regression model\n\nset.seed(45)\n# add popularity effect\n# est2 <- ergm(net~edges+absdiff(\"ideol\")+edgecov(\"dist\")+istar(2))\n\ntest2 <- ergm(net2~edges+absdiff(\"mfr\")+edgecov(\"dist\")+\n                kstar(c(2,3,4,5) + trianglepercent )\n# NOTE: The ERGM term istar may not be used with networks with directed==FALSE\n\n# Check MCMC performance\nmcmc.diagnostics(est2)\n# you need to look for not significant p-values\n# Are sample statistics significantly different from observed?\n# P-val.     0.1729218     0.2172920    0.2445153 0.2249334       0.7585941\n# these P-vals are sign of good fit\nset.seed(45)\n# increase MCMC.samplesize\nest3 <- ergm(net~edges+absdiff(\"ideol\")+edgecov(\"dist\")+istar(2),\n             control=control.ergm(MCMC.samplesize=30000))\n\nmcmc.diagnostics(est3)\n# Are sample statistics significantly different from observed?\n# P-val.     0.36291977    0.37004904    0.2394312 0.4677340       0.8136722\n\nset.seed(1234)\ngof3 <- gof(est3,control=control.gof.ergm(nsim=200)) \npar(mfrow=c(2,2))\nplot(gof3)\n\nsummary(est3)\n\n\n\n\n# add transitivity\n# in this context: 'a friend of a friend is a friend' ie A sponsors B's bill,\n# A sponsor's C's bill, transitivity is it's then more likely that ?\nset.seed(45)\nest4 <- ergm(net~edges+absdiff(\"ideol\")+edgecov(\"dist\")+istar(2)+triangle,\n             control=control.ergm(MCMC.samplesize=30000))\nmcmc.diagnostics(est4)\n#REALLY BAD FIT\n#Are sample statistics significantly different from observed?\n#P-val.        0.00000       0.00000       0.0000    0.0000    0.0000               0\n\n# the Geweke stats (which inicate if the MCMC ran sufficient iterations) is fine tho\n#Sample statistics burn-in diagnostic (Geweke):\n#P-values (lower = worse):\n#  edges absdiff.ideol  edgecov.dist        istar2      triangle \n#0.2586415     0.2095934     0.3413196     0.3234600     0.1502889 \n\n\n\n\n\n# try GWESP\nset.seed(45)\n# fixed = F, the estimation would have started at 0,\n#  but we want fixed=T, since we want it to be fixed at 0\nest5 <- ergm(net~edges+absdiff(\"ideol\")+edgecov(\"dist\")+istar(2)+gwesp(0, fixed=T),\n             control=control.ergm(MCMC.samplesize=30000))\n\n# \n# Check for degeneracy\nmcmc.diagnostics(est5)\n\n\n\n# what are all the exogenous covariates that can explain networks,\n# so for neuronal networks, what covariates should be added\n\n# his suggestion is to run a different ERGM on each network, then plot the \n# transitivity gwest coefficient for control and for treated and\n# see if there's some difference\n\n# add things iteratively \n\n\n\n\n\n\nset.seed(1234)\ngof5 <- gof(est5,control=control.gof.ergm(nsim=200)) \npar(mfrow=c(2,2))\nplot(gof5)\n\nsummary(est5)\n\n\n",
    "created" : 1407514656588.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1157258279",
    "id" : "412F8A86",
    "lastKnownWriteTime" : 1407347228,
    "path" : "F:/Kathleen/Analysis/spatialContent/spatial_properties.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}