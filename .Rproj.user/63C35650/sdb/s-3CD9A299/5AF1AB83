{
    "contents" : "create_burst_ont_Data <-\n  function(h5Files,  save.rdata=F, add.silent.wells=T ){\n    \n    write.header=T\n    plates = unique( sapply(strsplit(basename(h5Files), split=\"_\"), function(x) x[3]) )\n    num.plates = length( plates )\n    \n    for (cur.plate in 1:num.plates){\n      \n      #####  Read in and make data\n      s=list()\n      h5Files.wanted = h5Files[grep(x=h5Files,pattern= plates[cur.plate])]\n      #order according to DIV\n      temp.l<-sapply(sapply(strsplit(basename(h5Files.wanted),split=\"_\"), \n                            function(x) x[4]) , nchar)\n      temp.div= substring( \n        sapply( strsplit(basename(h5Files.wanted),split=\"_\"), function(x) x[4]),\n        rep(4,length(h5Files.wanted)),temp.l)\n      \n      h5Files.wanted = h5Files.wanted[order(as.numeric(temp.div)) ]\n      \n      for (cur.file in 1:length( h5Files.wanted ) ){\n        \n        s[[cur.file]]=h5.read.spikes( h5Files.wanted[cur.file] )\n        # get meta-data\n        g=c(); #remove any information stored in g\n        g<-h5read(path.expand( h5Files.wanted[cur.file] ), name = \"/\")\n        if ( is.element( \"treatment\", names(g) ) ){\n          s[[cur.file]]$cw = substring(s[[cur.file]]$channel,1,2 )\n          s[[cur.file]]$treatment = g$treatment         \n          names(s[[cur.file]]$treatment) = g$well\n          s[[cur.file]]$dose = g$dose\n          names(s[[cur.file]]$dose) = g$well\n          s[[cur.file]]$sCount = g$sCount\n          names(s[[cur.file]]$sCount) = g$well\n          s[[cur.file]]$units = g$units\n          names(s[[cur.file]]$units) = g$well\n          s[[cur.file]]$well = g$well\n          s[[cur.file]]$summary.table = g$summary.table\n          s[[cur.file]]$array = g$array     \n          s[[cur.file]]$DIV = strsplit( basename(s[[cur.file]]$file), split=\"_\")[[1]][4]\n        } else{\n          print ('Error: meta-data not available in .h5 file');\n          \n        }\n        \n        allb=list()\n        allb <- lapply(s[[cur.file]]$spikes, mi.find.bursts)\n        s[[cur.file]]$allb <- allb       \n        s[[cur.file]]$bs<-calc.burst.summary( s[[cur.file]]  )\n        \n        h=calc.all.isi(s[[cur.file]], allb)\n        s[[cur.file]]$isi = h\n        \n        \n        nspikes.old <- calculate.network.spikes(s[[cur.file]])\n        \n        s[[cur.file]]$ns.all <- nspikes.old$ns.all\n        \n        nspikes <- summary.network.spikes.dh(s[[cur.file]],nspikes.old, ns.E = 2, sur)\n        \n        s[[cur.file]]$ns.all <- nspikes$ns.all\n        \n        \n        # local correlation for one electrode with all other electrodes\n        local.cor=c()\n        local.cor<-local.corr.all.ont(s, t.p=cur.file )  \n        s[[cur.file]]$local.cor<-local.cor\n        \n        # cv.time and network\n        temp.list=c()\n        temp.list<- cv.timestamps(s[[cur.file]]$spikes, s, cur.file)\n        s[[cur.file]]$cv.time = temp.list[[1]]\n        names(s[[cur.file]]$cv.time) = unique(s[[cur.file]]$cw)\n        s[[cur.file]]$cv.network = temp.list[[2]]\n        names(s[[cur.file]]$cv.network) = unique(s[[cur.file]]$cw)\n        \n        \n        \n        \n        \n        \n        \n        \n        ####  AE Filtered data frame\n        ##+++++++++++++++++  make data frame        \n        ae.index.l<- split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw )\n        ae.index.v<- unlist( split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw ) )\n        # we need the wells that we have at least one AE\n        well.names<-unique( subset(s[[cur.file]]$cw, ae.index.v) )\n        num.wells = length(unique( subset(s[[cur.file]]$cw, ae.index.v) ) )\n        well.indices = which(is.element(s[[cur.file]]$well, well.names ))\n        \n        if( grepl( strsplit(basename(s[[cur.file]]$file), split=\"_\")[[1]][4],\n                   pattern=\"DIV\" ) ){\n          DIV <- rep( substring(strsplit(basename(s[[cur.file]]$file), split=\"_\")[[1]][4],\n                                4, nchar(strsplit(basename(s[[cur.file]]$file), \n                                                  split=\"_\")[[1]][4])  ), num.wells)           \n        } else {\n          DIV<-rep(strsplit(basename(s[[cur.file]]$file), split=\"_\")[[1]][4],\n                   num.wells)\n        } \n        \n        df=c() #erase prior data\n        if ( num.wells>0 ){\n          \n          df<-data.frame(\n            date = rep( unlist(strsplit(basename(s[[cur.file]]$file), split=\"_\"))[2]  , \n                        num.wells) , \n            Plate.SN = rep( strsplit(basename(s[[cur.file]]$file), split=\"_\")[[1]][3], \n                            num.wells) ,\n            DIV = as.numeric( DIV) ,\n            well = well.names ,\n            trt = s[[cur.file]]$treatment[ well.names ]  , \n            dose = s[[cur.file]]$dose[ well.names ]  ,\n            units = s[[cur.file]]$units[ well.names ]  ,\n            meanfiringrate=sapply(by(subset(s[[cur.file]]$meanfiringrate, ae.index.v),\n                                     subset(s[[cur.file]]$cw, ae.index.v), mean, na.rm=T), \n                                  function(x) x[1]) ,\n            \n            burst.per.min = sapply( \n              by( subset(s[[cur.file]]$bs$bursts.per.min, ae.index.v), \n                  subset(s[[cur.file]]$cw, ae.index.v), mean, na.rm=T),\n                                    function(x) x[1]) ,\n            \n            mean.isis = sapply(by(subset( s[[cur.file]]$bs$mean.isi, ae.index.v),\n                                  subset(s[[cur.file]]$cw, ae.index.v) , mean, na.rm=T), \n                               function(x) x[1]) ,\n            \n            per.spikes.in.burst =sapply(by(subset(s[[cur.file]]$bs$per.spikes.in.burst, \n                                                  ae.index.v),\n                                           subset(s[[cur.file]]$cw, ae.index.v) , \n                                           mean, na.rm=T), function(x) x[1]) ,\n            \n            mean.dur =sapply(by(subset( s[[cur.file]]$bs$mean.dur, ae.index.v),\n                                subset( s[[cur.file]]$cw, ae.index.v) , mean, na.rm=T), \n                             function(x) x[1]) ,\n            \n            mean.IBIs =sapply(by(subset( s[[cur.file]]$bs$mean.IBIs, ae.index.v) ,\n                                 subset( s[[cur.file]]$cw, ae.index.v), mean, na.rm=T), \n                              function(x) x[1]) ,\n            \n            nAE = unlist( lapply( \n              by( s[[cur.file]]$meanfiringrate*60, s[[cur.file]]$cw, \n                  function(x) x>=5), sum ) )[well.names] ,\n            \n            nABE= unlist( lapply( \n              by( s[[cur.file]]$bs$bursts.per.min, s[[cur.file]]$cw, \n                  function(x) x>=0.5), sum ) )[well.names] ,\n            \n            ns.n = sapply(s[[cur.file]]$ns.all, \n                          function(x) x$brief['n'])[paste(well.names, \"n\", sep=\".\")] , \n            ns.peak.m = sapply(s[[cur.file]]$ns.all , \n                               function(x) x$brief['peak.m'])[ \n                                 paste(well.names, \"peak.m\", sep=\".\") ] ,\n            ns.durn.m = sapply(s[[cur.file]]$ns.all, \n                               function(x) x$brief['durn.m'])[ \n                                 paste(well.names, \"durn.m\", sep=\".\") ] ,\n            ns.percent.of.spikes.in.ns = sapply(s[[cur.file]]$ns.all, \n                                                function(x) x$brief['percent.of.spikes.in.ns'])[ paste(well.names, \"percent.of.spikes.in.ns\", sep=\".\") ] ,\n            ns.mean.insis = sapply(s[[cur.file]]$ns.all, \n                                   function(x) x$brief['mean.insis'])[ paste(well.names, \"mean.insis\", sep=\".\") ] ,\n            ns.durn.sd = sapply(s[[cur.file]]$ns.all, \n                                function(x) x$brief['durn.sd'])[ paste(well.names, \"durn.sd\", sep=\".\") ] ,\n            ns.mean.spikes.in.ns = sapply(s[[cur.file]]$ns.all, \n                                          function(x) x$brief['mean.spikes.in.ns'])[ paste(well.names, \"mean.spikes.in.ns\", sep=\".\") ] ,\n            \n            # not computed on active electrodes,problem?\n            r=sapply(s[[cur.file]]$local.cor, mean, na.rm=T)[well.names] ,\n            \n            cv.time = s[[cur.file]]$cv.time[well.names]  ,\n            cv.network = s[[cur.file]]$cv.network[well.names] ,\n            \n            file.name = rep( basename(s[[cur.file]]$file), num.wells )  \n          ) #end data frame\n          \n          # write data to .csv file, \n          # wait to write for burst analysis\n          if (FALSE){\n            \n          if (write.header ){\n            write.table(  df, file = paste( paste( csv.filename.AEfilt, \n                                                   strsplit(basename(s[[cur.file]]$file),split=\"_\")[[1]][2] ,\n                                                   plates[cur.plate],sep=\"_\"), \".csv\", sep=\"\" ), \n                          sep=\",\", append = F, col.names=T, row.names=F )\n            \n          } else{\n            write.table(  df, file = paste( paste( csv.filename.AEfilt, strsplit(basename(s[[cur.file]]$file),split=\"_\")[[1]][2] ,\n                                                   plates[cur.plate],sep=\"_\"), \".csv\", sep=\"\" ),\n                          sep=\",\", append = T, col.names=F, row.names=F )\n          }\n          \n          } #end of if FALSE\n        } # end of if num.wells>0\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        #####  ABE Filtered Data\n        \n        # +++++++++++++make data frame\n        ae.index.l<- split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw )\n        ae.index.v<- unlist( split((s[[cur.file]]$meanfiringrate*60>=5), f=s[[cur.file]]$cw ) )\n        \n        abe.index<- unlist( split((s[[cur.file]]$bs$bursts.per.min>=0.5), f=s[[cur.file]]$cw ) )\n        \n        # we need the wells that we have at least one AE\n        well.names<-unique( subset(s[[cur.file]]$cw, ae.index.v) )\n        num.wells = length(unique( subset(s[[cur.file]]$cw, ae.index.v) ) )\n        well.indices = which(is.element(s[[cur.file]]$well, well.names ))\n        \n\n        if ( sum(abe.index)>0 ){\n          \n          # we need the wells that we have at least one AE\n          well.names.abe<-unique( subset(s[[cur.file]]$cw, abe.index) )\n          num.wells.abe = length(unique( subset(s[[cur.file]]$cw, abe.index) ) )\n          well.indices.abe = which(is.element(s[[cur.file]]$well, well.names.abe )) \n          \n          #make data frame\n          if( grepl( strsplit(basename(s[[cur.file]]$file), split=\"_\")[[1]][4],\n                     pattern=\"[DIV]\" ) ){\n            DIV <- rep( substring(strsplit(basename(s[[cur.file]]$file), split=\"_\")[[1]][4],\n                                  4, nchar(strsplit(basename(s[[cur.file]]$file), split=\"_\")[[1]][4])  ), \n                        num.wells)           \n          } else {\n            DIV<-rep(unlist( strsplit(basename(s[[cur.file]]$file), split=\"_\")[[1]][4] ),\n                     num.wells)\n          } \n          \n          \n          mean.isis.abe = sapply(by(subset( s[[cur.file]]$bs$mean.isi, abe.index),\n                                subset(s[[cur.file]]$cw, abe.index) , mean, na.rm=T), \n                                function(x) x[1]) \n          \n          per.spikes.in.burst.abe =sapply(by(subset(s[[cur.file]]$bs$per.spikes.in.burst, abe.index),\n                                         subset(s[[cur.file]]$cw, abe.index) , mean, na.rm=T),\n                                         function(x) x[1]) \n          \n          mean.dur.abe =sapply(by(subset( s[[cur.file]]$bs$mean.dur, abe.index),\n                              subset( s[[cur.file]]$cw, abe.index) , mean, na.rm=T), \n                              function(x) x[1]) \n          \n          mean.IBIs.abe =sapply(by(subset( s[[cur.file]]$bs$mean.IBIs, abe.index) ,\n                               subset( s[[cur.file]]$cw, abe.index), mean, na.rm=T), \n                               function(x) x[1]) \n          \n          if ( num.wells>num.wells.abe ){\n            \n            mean.isis<-rep(NA, length(well.names))\n            names(mean.isis)<-well.names\n            mean.isis[well.names.abe]<-mean.isis.abe\n            \n            per.spikes.in.burst<-rep(NA, length(well.names))\n            names( per.spikes.in.burst )<-well.names\n            per.spikes.in.burst[well.names.abe]<-per.spikes.in.burst.abe\n            \n            mean.dur<-rep(NA, length(well.names))\n            names(mean.dur)<-well.names\n            mean.dur[well.names.abe]<-mean.dur.abe\n            \n            mean.IBIs<-rep(NA, length(well.names))\n            names(mean.IBIs)<-well.names\n            mean.IBIs[well.names.abe]<-mean.IBIs.abe\n          } else {\n            mean.isis <- mean.isis.abe  \n            \n            per.spikes.in.burst <-per.spikes.in.burst.abe \n            \n            mean.dur<-mean.dur.abe \n            \n            mean.IBIs<-mean.IBIs.abe  \n            \n          }\n          \n          df2=c()\n          df2<-data.frame(\n            date = df$date , \n            Plate.SN = df$Plate.SN ,\n            DIV = as.numeric( df$DIV ) ,\n            well = df$well ,\n            trt = df$trt  , \n            dose = df$dose  ,\n            units = df$units  ,         \n            meanfiringrate = df$meanfiringrate ,\n            \n            burst.per.min = df$burst.per.min ,\n            \n            mean.isis = mean.isis ,\n            \n            per.spikes.in.burst = per.spikes.in.burst  ,\n            \n            mean.dur = mean.dur ,\n            \n            mean.IBIs = mean.IBIs  ,\n            \n            nAE = df$nAE ,\n            \n            nABE = df$nABE ,\n            \n            ns.n = df$ns.n , #nspikes$ns.all$A8$brief\n            ns.peak.m = df$ns.peak.m ,\n            ns.durn.m = df$ns.durn.m   ,\n            ns.percent.of.spikes.in.ns = df$ns.percent.of.spikes.in.ns ,\n            ns.mean.insis = df$ns.mean.insis ,\n            ns.durn.sd = df$ns.durn.sd ,\n            ns.mean.spikes.in.ns = df$ns.mean.spikes.in.ns ,\n            \n            \n            # not computed on active electrodes,problem?\n            r= df$r ,\n            \n            cv.time= df$cv.time  ,\n            cv.network= df$cv.network ,\n            \n            file.name = df$file.name  \n          )\n          \n          may.be.zero<-c(\"nAE\", \"nABE\", \"meanfiringrate\", \"burst.per.min\",\n                         \"cv.network\",\"cv.time\", \"per.spikes.in.burst\", \n                         \"ns.percent.of.spikes.in.ns\",\"ns.n\", \n                         \"per.spikes.in.burst\", \"r\")\n          \n          # add in well level number for wells that don't appear in calculation\n          if (add.silent.wells){           \n            silent.wells<-setdiff( s[[cur.file]]$well, df2$well )\n            date.sw<-rep(df2$date[1], length(silent.wells) )\n            Plate.SN.sw<-rep(df2$Plate.SN[1], length(silent.wells) )\n            DIV.sw<-rep(df2$DIV[1], length(silent.wells) )\n            trt.sw<- s[[1]]$treatment[silent.wells]\n            dose.sw<-s[[1]]$dose[silent.wells]\n            units.sw<-s[[1]]$units[silent.wells]\n            file.name.sw<-rep(df2$file.name[1], length(silent.wells) )\n            for (i in 1:length(may.be.zero)){\n              assign(paste(may.be.zero[i],\"sw\",sep=\".\"), \n                     rep(0, length(silent.wells) ) ) \n            }\n            may.not.be.zero<-setdiff( names(df2), c(may.be.zero, \n                  \"DIV\",\"date\",\"well\",\"Plate.SN\",\"trt\",\"dose\",\"units\",\"file.name\") )\n            for (i in 1:length(may.be.zero) ){\n              assign(paste(may.not.be.zero[i],\"sw\",sep=\".\"), \n                     rep(NA, length(silent.wells) ) ) \n            }\n            \n            df2.sw<-\n            data.frame(date=date.sw, Plate.SN=Plate.SN.sw, \n                       DIV=DIV.sw, well= silent.wells, trt = trt.sw, \n                       dose = dose.sw,\n                  units= units.sw, meanfiringrate = meanfiringrate.sw, \n                  burst.per.min=burst.per.min.sw, mean.isis=mean.isis.sw,\n                  per.spikes.in.burst=per.spikes.in.burst.sw, \n                  mean.dur=mean.dur.sw, mean.IBIs=mean.IBIs.sw, nAE=nAE.sw,\n                  nABE=nABE.sw, ns.n=ns.n.sw, ns.peak.m=ns.peak.m.sw, \n                  ns.durn.m=ns.durn.m.sw, \n                  ns.percent.of.spikes.in.ns=ns.percent.of.spikes.in.ns.sw,\n                  ns.mean.insis=ns.mean.insis.sw, \n                  ns.durn.sd=ns.durn.sd.sw, \n                  ns.mean.spikes.in.ns=ns.mean.spikes.in.ns.sw, \n                  r=r.sw, \n                  cv.time=cv.time.sw, \n                  cv.network=cv.network.sw, \n                  file.name=file.name.sw )\n            \n            df2<-rbind(df2, df2.sw)\n            \n          } # end of if add silent wells\n          \n          #change NA to 0 for endpoints that may be zero\n          for(cur.var in may.be.zero ){\n            df2[ is.na(df2[,cur.var]) , cur.var]<-0\n          }\n            \n          \n          # write data to .csv file\n          if ( write.header ){\n            write.table(  df2, \n                          file= paste( paste( csv.filename.ABEfilt, \n                                              strsplit(basename(s[[cur.file]]$file),split=\"_\")[[1]][2] ,\n                                              plates[cur.plate],sep=\"_\"), \".csv\", sep=\"\" ) ,\n                          sep=\",\", append = F, col.names=T, row.names=F )\n            \n          } else{\n            write.table(  df2, file= paste( paste( csv.filename.ABEfilt, \n                                                   strsplit(basename(s[[cur.file]]$file),split=\"_\")[[1]][2] ,\n                                                   plates[cur.plate],sep=\"_\"), \".csv\", sep=\"\" ),\n                          sep=\",\", append = T, col.names=F, row.names=F )\n          }\n          \n          \n          \n          \n        } else { \n          df2<-df\n          df2$mean.isis<-rep(NA, length(df2$well))\n          df2$mean.IBIs<-rep(NA, length(df2$well))\n          df2$per.spikes.in.burst<-rep(NA, length(df2$well))\n          df2$mean.dur<-rep(NA, length(df2$well))\n          \n          \n          \n          \n          may.be.zero<-c(\"nAE\", \"nABE\", \"meanfiringrate\", \"burst.per.min\",\n                         \"cv.network\",\"cv.time\", \"per.spikes.in.burst\", \n                         \"ns.percent.of.spikes.in.ns\",\"ns.n\", \n                         \"per.spikes.in.burst\", \"r\")\n          \n          # add in well level number for wells that don't appear in calculation\n          if (add.silent.wells){           \n            silent.wells<-setdiff( s[[cur.file]]$well, df2$well )\n            date.sw<-rep(df2$date[1], length(silent.wells) )\n            Plate.SN.sw<-rep(df2$Plate.SN[1], length(silent.wells) )\n            DIV.sw<-rep(df2$DIV[1], length(silent.wells) )\n            trt.sw<- s[[1]]$treatment[silent.wells]\n            dose.sw<-s[[1]]$dose[silent.wells]\n            units.sw<-s[[1]]$units[silent.wells]\n            file.name.sw<-rep(df2$file.name[1], length(silent.wells) )\n            for (i in 1:length(may.be.zero)){\n              assign(paste(may.be.zero[i],\"sw\",sep=\".\"), \n                     rep(0, length(silent.wells) ) ) \n            }\n            may.not.be.zero<-setdiff( names(df2), c(may.be.zero, \n                                                    \"DIV\",\"date\",\"well\",\"Plate.SN\",\"trt\",\"dose\",\"units\",\"file.name\") )\n            for (i in 1:length(may.be.zero) ){\n              assign(paste(may.not.be.zero[i],\"sw\",sep=\".\"), \n                     rep(NA, length(silent.wells) ) ) \n            }\n            \n            df2.sw<-\n              data.frame(date=date.sw, Plate.SN=Plate.SN.sw, \n                         DIV=DIV.sw, well= silent.wells, trt = trt.sw, \n                         dose = dose.sw,\n                         units= units.sw, meanfiringrate = meanfiringrate.sw, \n                         burst.per.min=burst.per.min.sw, mean.isis=mean.isis.sw,\n                         per.spikes.in.burst=per.spikes.in.burst.sw, \n                         mean.dur=mean.dur.sw, mean.IBIs=mean.IBIs.sw, nAE=nAE.sw,\n                         nABE=nABE.sw, ns.n=ns.n.sw, ns.peak.m=ns.peak.m.sw, \n                         ns.durn.m=ns.durn.m.sw, \n                         ns.percent.of.spikes.in.ns=ns.percent.of.spikes.in.ns.sw,\n                         ns.mean.insis=ns.mean.insis.sw, \n                         ns.durn.sd=ns.durn.sd.sw, \n                         ns.mean.spikes.in.ns=ns.mean.spikes.in.ns.sw, \n                         r=r.sw, \n                         cv.time=cv.time.sw, \n                         cv.network=cv.network.sw, \n                         file.name=file.name.sw )\n            \n            df2<-rbind(df2, df2.sw)\n            \n          } # end of if add silent wells\n          \n          #change NA to 0 for endpoints that may be zero\n          for(cur.var in may.be.zero ){\n            df2[ is.na(df2[,cur.var]) , cur.var]<-0\n          }\n          \n          \n          \n          \n          \n          # write data to .csv file\n          if ( write.header ){\n            write.table(  df2, \n                          file= paste( paste( csv.filename.ABEfilt, \n                                              strsplit(basename(s[[cur.file]]$file),split=\"_\")[[1]][2] ,\n                                              plates[cur.plate],sep=\"_\"), \".csv\", sep=\"\" ) ,\n                          sep=\",\", append = F, col.names=T, row.names=F )\n            \n          } else{\n            write.table(  df2, file= paste( paste( csv.filename.ABEfilt, \n                                                   strsplit(basename(s[[cur.file]]$file),split=\"_\")[[1]][2] ,\n                                                   plates[cur.plate],sep=\"_\"), \".csv\", sep=\"\" ),\n                          sep=\",\", append = T, col.names=F, row.names=F )\n          }\n          \n          \n          }#end of if (sum(ABEind>0))\n        \n        \n        \n        write.header=F\n      } #end loop through h5Files in current plate\n      \n      \n      if (save.rdata ){\n        save(s, file = paste(h5.dir ,  paste(\"/s\",\n                                             strsplit(basename(s[[cur.file]]$file),split=\"_\")[[1]][2] ,\n                                             plates[cur.plate] , \n                                             paste('thru',s[[cur.file]]$DIV, \".Rdata\", sep=\"\") ,\n                                             sep=\"_\" ), sep=\"\")    ) \n      }\n      \n      print(paste('-----------------       Done with file # ', cur.file, sep= \"\") )\n      \n    } # end of loop through plates\n    \n    \n  }\n",
    "created" : 1413302035334.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "337907730",
    "id" : "5AF1AB83",
    "lastKnownWriteTime" : 1413305391,
    "path" : "E:/R/Rpackage_meadq/meadq/R/create_burst_ont_Data.R",
    "project_path" : "R/create_burst_ont_Data.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}